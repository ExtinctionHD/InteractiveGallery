#version 450

layout (local_size_x_id = 0) in;               
layout (local_size_y_id = 1) in;

layout (set = 0, binding = 0) uniform sampler2D hdrTexture;
layout (set = 0, binding = 1) uniform sampler2D exposureTexture;
layout (set = 1, binding = 0, rgba8) uniform image2D resultImage;

// vec3 toneReinhard(vec3 vColor, float average, float exposure, float whitePoint)
// {
//   // RGB -> XYZ conversion
//   const mat3x3 RGB2XYZ = { { 0.5141364, 0.3238786,  0.16036376 },
//                            { 0.265068,  0.67023428, 0.06409157 },
//                            { 0.0241188, 0.1228178,  0.84442666 } } ;				                    
//   vec3 XYZ = mul(RGB2XYZ, vColor.rgb);
  
//   // XYZ -> Yxy conversion
//   vec3 Yxy;
//   Yxy.r = XYZ.g;                            // copy luminance Y
//   Yxy.g = XYZ.r / (XYZ.r + XYZ.g + XYZ.b ); // x = X / (X + Y + Z)
//   Yxy.b = XYZ.g / (XYZ.r + XYZ.g + XYZ.b ); // y = Y / (X + Y + Z)
    
//   // (Lp) Map average luminance to the middlegrey zone by scaling pixel luminance
//   float Lp = Yxy.r * exposure / average;         
                
//   // (Ld) Scale all luminance within a displayable range of 0 to 1
//   Yxy.r = (Lp * (1.0f + Lp/(whitePoint * whitePoint)))/(1.0f + Lp);
  
//   // Yxy -> XYZ conversion
//   XYZ.r = Yxy.r * Yxy.g / Yxy. b;               // X = Y * x / y
//   XYZ.g = Yxy.r;                                // copy luminance Y
//   XYZ.b = Yxy.r * (1 - Yxy.g - Yxy.b) / Yxy.b;  // Z = Y * (1-x-y) / y
    
//   // XYZ -> RGB conversion
//   const float3x3 XYZ2RGB  = { 2.5651,-1.1665,-0.3986,
//                               -1.0217, 1.9777, 0.0439, 
//                                0.0753, -0.2543, 1.1892};

//   return mul(XYZ2RGB, XYZ);
// }

void main()
{	
	// ivec2 uv = ivec2(gl_GlobalInvocationID.xy);
	ivec2 uv = ivec2(gl_WorkGroupID.xy * gl_WorkGroupSize.xy + gl_LocalInvocationID.xy);
	
	vec3 hdrColor = texelFetch(hdrTexture, uv, 0).rgb;

	vec3 exposureColor = texelFetch(exposureTexture, ivec2(0.0f), 0).rgb;
	float exposure = (exposureColor.r + exposureColor.g + exposureColor.b) / 3;

	float T = pow(exposure, -1);
	vec3 result = 1 - exp(-T * hdrColor);

	// vec3 result = toneReinhard(hdrColor, exposure, 1.0f, 1.0f);

	if (uv.x < 64 && uv.y < 64)
	{
		imageStore(resultImage, uv, vec4(vec3(exposure), 1.0f));
	}
	else
	{
		imageStore(resultImage, uv, vec4(result, 1.0f));
	}
}
